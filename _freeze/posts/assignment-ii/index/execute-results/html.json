{
  "hash": "60e4be80c71e94f58d34896cb0a4bb7e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 2: COVID-19 Data Visualization\"\nauthor: \"Justice Kessie\"\ndate: \"2025-03-24\"\ncategories: [news, code, analysis]\nimage: \"image.png\"\n---\n\n\n\n## Description of Data\n\nThe covid_ts dataset tracks the daily counts of COVID-19 infections and deaths across U.S. states, broken down by different virus strains. It includes several key columns: the date, state, total infections, deaths, and daily case counts for each COVID-19 strain— *Original*, *Alpha*, *Delta*, and *Omicron*. The date column records the day of the entry, while the state column tells you which U.S. state the data pertains to. The total_infections column gives the overall count of COVID-19 cases, and deaths shows the number of lives lost to the virus. The strain-specific columns break down the daily cases for each variant: *Original*, *Alpha*, *Delta*, and *Omicron*.\n\nThe dataset begins in early 2020, during the first wave of the pandemic, and continues through the various waves caused by the emergence of new strains. These variants, like Alpha, Delta, and Omicron, had different levels of contagiousness and impacts on public health, which is reflected in their infection and death rates. For instance, the Alpha variant, emerging in late 2020, was more easily spread than the original strain, while Delta, which appeared in 2021, caused a major global surge. Omicron, emerging toward the end of 2021, was highly transmissible but led to fewer severe cases compared to previous strains.\n\nBy analyzing this dataset, we can track how each variant's dominance shifted over time and across regions. It provides insight into when and where each strain became the most prevalent, shedding light on regional variations in how COVID-19 spread. Additionally, the dataset allows us to explore how mortality rates changed with each variant. By comparing death counts for each strain, we can gain a better understanding of how the severity of the virus evolved. Overall, the dataset is a powerful tool for both public health policy makers and epidemiological researchers. It allows us to visualize how the virus spread geographically and how different variants impacted different regions at various times. For example, using pie charts, we can easily show the proportion of each strain in different states, offering a clear picture of how the pandemic unfolded across the U.S. over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Required packages\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gganimate)\nlibrary(gifski)\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print summary to verify strain distribution\nsummary_stats <- covid_ts %>%\n  group_by(state) %>%\n  summarise(\n    total_cases = sum(total_infections, na.rm = TRUE),\n    total_original = sum(Original, na.rm = TRUE),\n    total_alpha = sum(Alpha, na.rm = TRUE),\n    total_delta = sum(Delta, na.rm = TRUE),\n    total_omicron = sum(Omicron, na.rm = TRUE)\n  )\nprint(summary_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 6\n   state       total_cases total_original total_alpha total_delta total_omicron\n   <chr>             <int>          <int>       <int>       <int>         <int>\n 1 Alabama          109539          65682       25021       14034          4802\n 2 Alaska           110052          66937       24660       13887          4568\n 3 Arizona          110436          67032       24881       13792          4731\n 4 Arkansas         109044          65642       24836       13768          4798\n 5 California       109176          66624       24302       13607          4643\n 6 Colorado         109372          66303       24677       13568          4824\n 7 Connecticut      109645          66791       24481       13669          4704\n 8 Delaware         109554          65733       25290       13836          4695\n 9 Florida          109953          66000       25072       13843          5038\n10 Georgia          109294          65753       24948       13955          4638\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the visualization with updated aesthetics\np <- ggplot(map_data, aes(x = long, y = lat, group = piece_id)) +\n  geom_polygon(\n    aes(fill = strain),\n    color = \"white\",\n    linewidth = 0.2  # Updated from 'size' to 'linewidth'\n  ) +\n  coord_map(\"albers\", lat0 = 39, lat1 = 45) +\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(\n    title = \"COVID-19 Strain Distribution in the United States\",\n    subtitle = \"Date: {frame_time}\",\n    fill = \"Dominant Strain\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    panel.grid = element_blank()  # Remove grid lines for cleaner map\n  ) +\n  transition_time(as.Date(paste(year, month, \"01\", sep = \"-\"))) +\n  ease_aes('linear')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.gif)\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}